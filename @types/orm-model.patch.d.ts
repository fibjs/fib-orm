/// <reference path="orm.d.ts" />
import OrmNs from 'orm'

interface InstanceAssociationItem {
    getAccessor: Function;
    setAccessor: Function;
    hasAccessor: Function;
    delAccessor: Function;
    addAccessor: Function;
}

interface InstanceOptions extends OrmNs.ModelOptions {
    one_associations: InstanceAssociationItem[]
    many_associations: InstanceAssociationItem[]
    extend_associations: InstanceAssociationItem[]
    association_properties: any 
    fieldToPropertyMap: any
}

// patch the missing field defined in orm/lib/Instance.js (such as defined by Object.defineProperty)
interface FixedModelInstance extends OrmNs.Instance {
    /**
     * default property but some has been declared in OrmNs.Instance,
     * so we comment it(e.g. `on: Function`)
     */
    /**(defined) on: Function; */
    /**(defined) save: Function; */
    saved: boolean;
    /**(defined) remove: Function; */
    set: Function;
    markAsDirty: Function;
    dirtyProperties: object;
    isInstance: boolean;
    isPersisted: boolean;
    isShell: boolean;
    /**(defined) validate: Function; */
    __singleton_uid: string | number;
    __opts?: InstanceOptions;
    model: OrmNs.Model;

    /**
     * methods used to add associations
     */
    hasOne: (...args: any[]) => OrmNs.Model;
    extendsTo: (...args: any[]) => OrmNs.Model;

    /**
     * methods generated by hooks
     */
    beforeCreate: Function;
    afterCreate: Function;
    beforeSave: Function;
    afterSave: Function;
    beforeValidation: Function;
    beforeRemove: Function;
    afterRemove: Function;
    afterLoad: Function;
    afterAutoFetch: Function;
    
    /**
     * orm/lib/Instance.js#L560
     * 
     * methods to property
     */
    // [methodFromProperty: string]: Function;
    /**
     * association property
     */
    aggregate: Function;

    [extraProperty: string]: any;
}

interface PatchSyncfiedInstantce extends FixedModelInstance {
    /**
     * @important
     * 
     * methods patchSyncfied by 'fib-orm'
     */
    countSync: Function;
    firstSync: Function;
    lastSync: Function;
    allSync: Function;
    whereSync: Function;
    findSync: Function;
    removeSync: Function;
    runSync: Function;
    /**
     * generated by association
     */
    /* getXxx: Function; */
    /* setXxx: Function; */
    /* removeXxx: Function; */

    /* findByXxx: Function; */
}